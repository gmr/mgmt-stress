#!/bin/sh
#
# NAME
#    bootstrap -- initialize/update docker environment
#
# SYNOPSIS
#    bootstrap
#    bootstrap shellinit
#
# DESCRIPTION
#    Execute this script without parameters to build the local docker
#    environment.  Once bootstrapped, dependent services are running
#    via docker-compose and the environment variables are written to
#    *build/test-environment* for future use.
#
#    Running this script with the _shellinit_ command line parameter
#    causes it to simply interrogate the running docker environment,
#    update *build/test-environment*, and print the environment to
#    the standard output stream in a shell executable manner.  This
#    makes the following pattern for setting environment variables
#    in the current shell work.
#
#        prompt% $(./bootstrap shellinit)
#
# vim: set ts=2 sts=2 sw=2 et:
if test -e /var/run/docker.sock
then
  DOCKER_IP=127.0.0.1
  ENV_PREFIX=""
elif docker-machine version >/dev/null 2>&1
then
  if ! MACHINE=$(docker-machine active 2>/dev/null)
  then
    MACHINE=$(docker-machine ls -q --filter state=Running | head -n 1)
    if test -z "${MACHINE}"
    then
      MACHINE=$(docker-machine ls -q | head -n 1)
      if test -z "$MACHINE"
      then
        MACHINE_NAME=${MACHINE_NAME:-platform}
        docker-machine create --driver virtualbox ${MACHINE_NAME}
        MACHINE=${MACHINE_NAME}
      fi
      docker-machine start ${MACHINE}
      ENV_PREFIX=$(docker-machine env ${MACHINE}| egrep -v '^#')
    fi
  fi

  if ! DOCKER_IP=$(docker-machine ip ${MACHINE})
  then
    echo "Failed to initialize docker-machine ${MACHINE}: $!."
    exit 70
  fi
  eval "$(docker-machine env ${MACHINE})"
else
  echo "Docker environment not detected."
  exit 1
fi
set -e

if test -n "$DOCKER_COMPOSE_PREFIX"
then
  COMPOSE_ARGS="-p $DOCKER_COMPOSE_PREFIX"
fi

mkdir -p build

get_exposed_port() {
  docker-compose ${COMPOSE_ARGS} port $1 $2 | cut -d: -f2
}

if test "$1" != 'shellinit'
then
  # recreate the world!
  docker-compose ${COMPOSE_ARGS} stop
  docker-compose ${COMPOSE_ARGS} rm --force --all -v
  docker-compose ${COMPOSE_ARGS} up -d

  echo "\nBootstrap complete\n\nDon't forget to execute \". _build/test-environment\"\n"
fi

echo "${ENV_PREFIX}
export DOCKER_COMPOSE_PREFIX=${DOCKER_COMPOSE_PREFIX}
export RABBITMQ_HOST=${DOCKER_IP}
export RABBITMQ_PORT=$(get_exposed_port rabbitmq 5672)
" > _build/test-environment

if test "$1" = "shellinit"
then
  cat _build/test-environment
fi
